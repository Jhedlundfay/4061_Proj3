# Tajudin Aliy aliyx004

# I understand this is a graded, individual examination that may not be
# discussed with anyone. I also understand that obtaining solutions or
# partial solutions from outside sources or discussing
# any aspect of the examination with anyone will result in failing the course.
# I further certify that this program represents my own work and that none of
# it was obtained from any source other than material presented as part of the
# course.

 #Completed though Task 7
from turtle import *
import tkinter.messagebox
import tkinter
import random
import math
import datetime

screenMinX = -500
screenMinY = -500
screenMaxX = 500
screenMaxY = 500

def intersect(obj1,obj2):

    distance = math.sqrt(math.pow(obj1.xcor()-obj2.xcor(),2)+math.pow(obj1.ycor()-obj2.ycor(),2))
    if distance <=50:
        return True
    return False

class LaserBeam(RawTurtle):
    def __init__(self,canvas,x,y,direction,dx,dy):
        super().__init__(canvas)
        self.penup()
        self.goto(x,y)
        self.setheading(direction)
        self.color("Green")
        self.lifespan = 200
        self.x = x
        self.y = y
        self.__dx = math.cos(math.radians(direction))*2+dx #this is Task 4A
        self.__dy = math.sin(math.radians(direction))*2+dy #this is Task 4A
        self.shape("laser")

    def get_lifespan(self):
        return self.lifespan
    def get_dx(self):
        return self.__dx
    def get_dy(self):
        return self.__dy
    def getRadius(self):
        return 4
    def move(self):
        screen = self.getscreen()
        x = self.xcor()
        y = self.ycor()

        x = (self.__dx + x - screenMinX) % (screenMaxX - screenMinX) + screenMinX
        y = (self.__dy + y - screenMinY) % (screenMaxY - screenMinY) + screenMinY
        self.lifespan = self.lifespan-1
        self.goto(x,y)
         #this shape has already been registered.


class Ghost(RawTurtle):
    def __init__(self,canvasobj,dx,dy,x,y,size):
        RawTurtle.__init__(self,canvasobj)
        self.penup()
        self.goto(x,y)
        self.hashit = false
        self.__dx = dx
        self.__dy = dy
        self.__size = size
        if self.__size==3:
            self.shape("blueghost.gif")
        elif self.__size==2:
            self.shape("pinkghost.gif")
    def get_dx(self):
        return self.__dx
    def get_dy(self):
        return self.__dy
    def set_dx(self,newdx):
        self.__dx=newdx
    def set_dy(self,newdy):
        self.__dy=newdy
    #Moves the ghost from its current position to a new position
    def move(self):
        screen = self.getscreen()
        x = self.xcor()
        y = self.ycor()

        x = (self.__dx + x - screenMinX) % (screenMaxX - screenMinX) + screenMinX
        y = (self.__dy + y - screenMinY) % (screenMaxY - screenMinY) + screenMinY

        self.goto(x,y)

    #returns the apprximate "radius" of the Ghost object
    def getRadius(self):
        return self.__size * 10 - 5

class FlyingTurtle(RawTurtle):
    def __init__(self,canvasobj,dx,dy,x,y, size=2):
        RawTurtle.__init__(self,canvasobj)
        self.penup()
        self.color("purple")
        self.goto(x,y)
        self.__dx = dx
        self.__dy = dy
        self.__size = size
        self.shape("turtle")

    def move(self):
        screen = self.getscreen()
        x = self.xcor()
        y = self.ycor()

        x = (self.__dx + x - screenMinX) % (screenMaxX - screenMinX) + screenMinX
        y = (self.__dy + y - screenMinY) % (screenMaxY - screenMinY) + screenMinY

        self.goto(x,y)
    def get_dx(self):
        return self.__dx
    def get_dy(self):
        return self.__dy

    def turboBoost(self):
        angle = self.heading()
        x = math.cos(math.radians(angle))
        y = math.sin(math.radians(angle))
        self.__dx = self.__dx + x
        self.__dy = self.__dy + y

    def stopTurtle(self):
        angle = self.heading()
        self.__dx = 0
        self.__dy = 0


    def getRadius(self):
        return 2




def main():

    # Start by creating a RawTurtle object for the window.
    firstwindow = tkinter.Tk()
    firstwindow.title("Turtle Saves the World!")
    canvas = ScrolledCanvas(firstwindow,600,600,600,600)
    canvas.pack(side = tkinter.LEFT)
    t = RawTurtle(canvas)

    screen = t.getscreen()
    screen.setworldcoordinates(screenMinX,screenMinY,screenMaxX,screenMaxY)
    screen.register_shape("blueghost.gif")
    screen.register_shape("pinkghost.gif")
    screen.register_shape("laser",((-2,-4),(-2,4),(2,4),(2,-4)))
    frame = tkinter.Frame(firstwindow)
    frame.pack(side = tkinter.RIGHT,fill=tkinter.BOTH)

    scoreVal = tkinter.StringVar()
    scoreVal.set("0")
    scoreTitle = tkinter.Label(frame,text="Score")
    scoreTitle.pack()
    scoreFrame = tkinter.Frame(frame,height=2, bd=1, relief=tkinter.SUNKEN)
    scoreFrame.pack()
    score = tkinter.Label(scoreFrame,height=2,width=20,textvariable=scoreVal,fg="Yellow",bg="black")
    score.pack()

    livesTitle = tkinter.Label(frame, text="Extra Lives Remaining")
    livesTitle.pack()
    livesFrame = tkinter.Frame(frame,height=30,width=60,relief=tkinter.SUNKEN)
    livesFrame.pack()
    livesCanvas = ScrolledCanvas(livesFrame,150,40,150,40)
    livesCanvas.pack()
    livesTurtle = RawTurtle(livesCanvas)
    livesTurtle.ht()
    livesScreen = livesTurtle.getscreen()
    life1 = FlyingTurtle(livesCanvas,0,0,-35,0)
    life2 = FlyingTurtle(livesCanvas,0,0,0,0)
    life3 = FlyingTurtle(livesCanvas,0,0,35,0)
    lives = [life1, life2, life3]
    t.ht()

    screen.tracer(10)

    #Tiny Turtle!
    flyingturtle = FlyingTurtle(canvas,0,0,(screenMaxX-screenMinX)/2+screenMinX,(screenMaxY-screenMinY)/2 + screenMinY,3)

    #A list to keep track of all the ghosts
    ghosts = []
    lasers = []
    dead_lasers = []
    dead_ghosts=[]
    #Create some ghosts and randomly place them around the screen
    for numofghosts in range(6):
        dx = random.random()*6  - 4
        dy = random.random()*6  - 4
        x = random.random() * (screenMaxX - screenMinX) + screenMinX
        y = random.random() * (screenMaxY - screenMinY) + screenMinY

        ghost = Ghost(canvas,dx,dy,x,y,3)

        ghosts.append(ghost)

    def play():
        #start counting time for the play function
        ##LEAVE THIS AT BEGINNING OF play()
        start = datetime.datetime.now()

        # Move the turtle
        flyingturtle.move()

        #Move the ghosts
        for each_laser in lasers:
            each_laser.move()

            if each_laser.lifespan == 0:
                dead_lasers.append(each_laser)
                lasers.remove(each_laser)
                each_laser.goto(-screenMinX*2, -screenMinY*2)
                each_laser.hideturtle()


        for each_ghost in ghosts:
            each_ghost.move()

        for each_laser in lasers:
            for each_ghost in ghosts:
                if intersect(each_ghost,each_laser):
                    dead_ghosts.append(each_ghost)
                    dead_lasers.append(each_laser)
                    each_ghost.hideturtle()
                    ghosts.remove(each_ghost)
                    each_laser.hideturtle()
                    lasers.remove(each_laser)
                    scoreVal.set(int(scoreVal.get())+20)

			  for each_ghost in ghosts:
        	 if intersect(each_ghost,flyingturtle):
              		if each_ghost.hasthit = False:
                  	lives.pop()
                  	each_ghost.ht()
                  	tkinter.messagebox.showwarning( "Uh-Oh","You Lost a Life!")
                    each_ghost.hashit = True
                  else:
                  	continue
      if lives == []:
        tkinter.messagebox.showwarning( "Uh-Oh","You Lost a Life!")
        return None
        #if lives==[]:


        if ghosts==[]:
            tkinter.messagebox.showinfo("You Win!!", "You saved the world!")
            return None
        #stop counting time for the play function
        ##LEAVE THIS AT END OF ALL CODE IN play()
        end = datetime.datetime.now()
        duration = end - start

        millis = duration.microseconds / 1000.0

        # Set the timer to go off again
        screen.ontimer(play,int(10-millis))
    def fireLaser():


       new_laser = LaserBeam(canvas,flyingturtle.xcor(),flyingturtle.ycor(),flyingturtle.heading(),flyingturtle.get_dx(),flyingturtle.get_dy())
       lasers.append(new_laser)



    # Set the timer to go off the first time in 5 milliseconds
    screen.ontimer(play, 5)

    #Turn turtle 7 degrees to the left
    def turnLeft():
        flyingturtle.setheading(flyingturtle.heading()+7)

    def turnRight():
        flyingturtle.setheading(flyingturtle.heading()-7)

    #turboBoost turtle
    def forward():
        flyingturtle.turboBoost()

    #stop Turtle
    def stop():
        flyingturtle.stopTurtle()

    #Call functions above when pressing relevant keys
    screen.onkeypress(turnLeft,"Left")
    screen.onkeypress(forward,"Up")
    screen.onkeypress(stop, "Down")
    screen.onkeypress(turnRight, "Right")
    screen.onkeypress(fireLaser,"")
    screen.listen()
    tkinter.mainloop()

if __name__ == "__main__":
    main()
